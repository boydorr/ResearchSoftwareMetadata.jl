var documenterSearchIndex = {"docs":
[{"location":"#ResearchSoftwareMetadata-documentation","page":"Home","title":"ResearchSoftwareMetadata documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ResearchSoftwareMetadata","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for ResearchSoftwareMetadata.","category":"page"},{"location":"#Summary","page":"Home","title":"Summary","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ResearchSoftwareMetadata is a Julia package that provides functionality for to allow a crosswalk between Project.toml, codemeta.json, .zenodo.json and the package LICENSE file to allow a consistent way of providing metadata for research software which allows the Julia General Registry to pick up the same metadata as GitHub and Zenodo while following the Research Software MetaData guidelines.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is registered in the General registry so can be built and installed with add. For example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(@v1.10) pkg> add ResearchSoftwareMetadata\n   Resolving package versions...\n    Updating `~/.julia/environments/v1.10/Project.toml`\n  [aea672f4] + ResearchSoftwareMetadata v0.1.0\n    Updating `~/.julia/environments/v1.10/Manifest.toml`\n\n(@v1.10) pkg>","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"First you need to add a small amount of additional metadata into your Project.toml file.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To  capture the license you are using and propagate it throughout the metadata files and through your julia code, add an SPDX license identifier to the file:","category":"page"},{"location":"","page":"Home","title":"Home","text":"[license]\nSPDX = \"BSD-2-Clause\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"To supplement the metadata on the authors of the package, add the ORCID for each author and the ROR for the organisation(s) they are affiliated with. You can add as many authors and as much or as little information as you like about each one by adding additional [[author_details]] blocks.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[[author_details]]\nname = \"Richard Reeve\"\norcid = \"0000-0003-2589-8091\"\n\n    [[author_details.affiliation]]\n    ror = \"00vtgdb53\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, from the root of your package, you can just run a crosswalk:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\n\n# Create a new project with ResearchSoftwareMetadata in it\nPkg.activate(; temp = true)\nPkg.add(\"ResearchSoftwareMetadata\")\n\n# Carry out a crosswalk between the different metadata formats\nusing ResearchSoftwareMetadata\nResearchSoftwareMetadata.crosswalk()","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you want to add in some additional metadata (the category of the software, or the keywords associated with it, or you want to increase the package version during the crosswalk, this is possible as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Add in additional metadata\nResearchSoftwareMetadata.crosswalk(category = \"ecology\", keywords = [\"julia\", \"metadata\", \"research software\", \"RSMD\"])\n\n# Increase version number during crosswalk\nResearchSoftwareMetadata.increase_patch() # Bump patch version (e.g. 0.4.1 -> 0.4.2)\nResearchSoftwareMetadata.increase_minor() # Bump minor version (e.g. 0.4.1 -> 0.5.0)\nResearchSoftwareMetadata.increase_major() # Bump major version (e.g. 0.4.1 -> 1.0.0)","category":"page"},{"location":"","page":"Home","title":"Home","text":"You might also consider reformatting all of your julia code to a consistent format. A .JuliaJormatter.toml file in the package root defines what the formatting standard should be.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg.add(\"JuliaFormatter\")\nPkg.develop(\"MyPackage\")\nusing JuliaFormatter\nusing MyPackage\nformat(MyPackage)","category":"page"},{"location":"#Reference-guide","page":"Home","title":"Reference guide","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ResearchSoftwareMetadata]","category":"page"},{"location":"#ResearchSoftwareMetadata.crosswalk","page":"Home","title":"ResearchSoftwareMetadata.crosswalk","text":"ResearchSoftwareMetadata.crosswalk(; category = nothing, keywords = nothing, build = false)\n\nRuns a crosswalk across Project.toml, LICENSE, codemeta.json and .zenodo.json as well as the julia source files to enforce consistency between the different metadata formats. It logs warnings and errors if it identifies inconsistencies while it is editing the files. The software category can be set with the category argument, likewise the keywords argument can contain a vector of keyword strings. The build argument sets the buildInstructions RSMD field - false leaves the instructions as is, true sets it to the same as the README, and a string sets it to that value. If update is true, mismatches between version numbers in codemeta.json are accepted.\n\n\n\n\n\n","category":"function"},{"location":"#ResearchSoftwareMetadata.get_first_release_date","page":"Home","title":"ResearchSoftwareMetadata.get_first_release_date","text":"ResearchSoftwareMetadata.get_first_release_date()\n\nReturns the first release date of this package on Julia's General Registry, or today's date if the package has not been registered yet.\n\n\n\n\n\n","category":"function"},{"location":"#ResearchSoftwareMetadata.get_organisation_from_ror-Tuple{String}","page":"Home","title":"ResearchSoftwareMetadata.get_organisation_from_ror","text":"ResearchSoftwareMetadata.get_organisation_from_ror(ror::String)\n\nTake a ROR from the user and query the ror.org API to return a Dict containing the relevant metadata or nothing if no such ROR exists.\n\n\n\n\n\n","category":"method"},{"location":"#ResearchSoftwareMetadata.get_os_from_workflows","page":"Home","title":"ResearchSoftwareMetadata.get_os_from_workflows","text":"ResearchSoftwareMetadata.get_os_from_workflows()\n\nReturns the operating systems that the GitHub workflows associated with this package work on. This is presumed to represent the operating systems that the software runs on.\n\n\n\n\n\n","category":"function"},{"location":"#ResearchSoftwareMetadata.get_person_from_orcid-Tuple{String}","page":"Home","title":"ResearchSoftwareMetadata.get_person_from_orcid","text":"ResearchSoftwareMetadata.get_person_from_orcid(orcid::String)\n\nTake an ORCID from the user and query the orcid.org API to return a Dict containing the relevant metadata or nothing if no such ORCID exists.\n\n\n\n\n\n","category":"method"},{"location":"#ResearchSoftwareMetadata.increase_major","page":"Home","title":"ResearchSoftwareMetadata.increase_major","text":"ResearchSoftwareMetadata.increase_major()\n\nIncreases the Project.toml version number by a major number (e.g. 0.4.1 to 1.0.0), and then runs ResearchSoftwareMetadata.crosswalk() to propagate this information.\n\n\n\n\n\n","category":"function"},{"location":"#ResearchSoftwareMetadata.increase_minor","page":"Home","title":"ResearchSoftwareMetadata.increase_minor","text":"ResearchSoftwareMetadata.increase_minor()\n\nIncreases the Project.toml version number by a minor number (e.g. 0.4.1 to 0.5.0), and then runs ResearchSoftwareMetadata.crosswalk() to propagate this information.\n\n\n\n\n\n","category":"function"},{"location":"#ResearchSoftwareMetadata.increase_patch","page":"Home","title":"ResearchSoftwareMetadata.increase_patch","text":"ResearchSoftwareMetadata.increase_patch()\n\nIncreases the Project.toml version number by a patch (e.g. 0.4.1 to 0.4.2), and then runs ResearchSoftwareMetadata.crosswalk() to propagate this information.\n\n\n\n\n\n","category":"function"},{"location":"#ResearchSoftwareMetadata.read_project","page":"Home","title":"ResearchSoftwareMetadata.read_project","text":"ResearchSoftwareMetadata.read_project()\n\nRead a Project.toml file in and return it in its canonical order in an OrderedDict.\n\n\n\n\n\n","category":"function"}]
}
